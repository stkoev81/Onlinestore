package com.skoev.onlinestore.entities.product;

import java.io.Serializable;
import javax.persistence.*;

/**
 * A class that represents the current inventory of a product. This class is 
 * composed of several different numbers that are updated by the business logic
 * from a transactional, pessimistic-locking context. This ensures that the 
 * numbers are changed consistently if multiple threads are trying to change them 
 * at the same time. 
 *
 * <br/><br/>
 *
 * The following applies to the the 4 different availability numbers: <br/> <br/>
 * 
 * numberAvailable = numberInWarehouse - numberInCarts - numberInUnprocessedOrders;
 * 
 */
@Entity
@Table(name = "PRODUCT_AVAILABILITY")
public class ProductAvailabilityEntity implements Serializable {

    /**
     * Autogenerated ID value
     */
    @GeneratedValue
    @Id
    private Long id;
    /**
     * Number of units of this product available for sale in the store.
     * This number is displayed to the customer, and if it is 0, the product
     * cannot be ordered. This number is decremented when a product is placed in 
     * cart and ordered; it is incremented back up if the cart is emptied (either 
     * explicitly or the session expired or the server was restarted) or the 
     * order processing fails. 
     */
    private Integer numberAvailable;
    /**
     * This is the number of units of the product that are physically available in 
     * the warehouse. This number is decremented when an order is marked as 
     * SHIPPED. This number can be changed by employee type MANAGER (for 
     * example when conducting an inventory or restocking). 
     */
    private Integer numberInWarehouse;
    /**
     * This is the number of units of the product that is currently sitting in 
     * shopping carts but has not been ordered yet. If the server is restarted, 
     * this number is set to 0 and numberAvailable is incremented accordingly.
     */
    private Integer numberInCarts;
    /**
     * This is the number of units of the product that is currently sitting in 
     * orders that have been placed but not shipped yet. This number gets 
     * incremented when an order is placed and decremented when an order is 
     * shipped or the order processing fails. 
     */
    private Integer numberInUnprocessedOrders;

    /**
     * Refreshes the {@link #numberAvailable} field; this method must be called
     * every time one of the following changes: {@link #numberInWarehouse}, 
     * {@link #numberInCarts}, or {@link #numberInUnprocessedOrders}. 
     */
    public void calculateNumberAvailable() {
        numberAvailable = numberInWarehouse - numberInCarts - numberInUnprocessedOrders;
    }

    public Integer getNumberAvailable() {
        return numberAvailable;
    }

    public Integer getNumberInCarts() {
        return numberInCarts;
    }

    public Integer getNumberInUnprocessedOrders() {
        return numberInUnprocessedOrders;
    }

    public Integer getNumberInWarehouse() {
        return numberInWarehouse;
    }

    public void setNumberAvailable(Integer numberAvailable) {
        this.numberAvailable = numberAvailable;
    }

    public void setNumberInCarts(Integer numberInCarts) {
        this.numberInCarts = numberInCarts;
    }

    public void setNumberInUnprocessedOrders(Integer numberInUnprocessedOrders) {
        this.numberInUnprocessedOrders = numberInUnprocessedOrders;
    }

    public void setNumberInWarehouse(Integer numberInWarehouse) {
        this.numberInWarehouse = numberInWarehouse;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }
}
