package com.skoev.onlinestore.entities.order;

import com.skoev.onlinestore.entities.user.*;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.*;
import javax.persistence.*;
import java.text.*;

/**
 * Class that represents an order placed to the online store.
 * 
 */
@Entity
@Table(name = "ORDERS")
public class OrderEntity implements Serializable {

    /**
     * This field is used to print a date in a user-friendly format; it is not
     * persisted in the database
     */
    @Transient
    private DateFormat dateFormat;
    /**
     * Autogenerated ID
     */
    @GeneratedValue
    @Id
    private Long id;
    /**
     * Total cost of all products in the order.
     */
    private BigDecimal totalCost;
    @Temporal(TemporalType.TIMESTAMP)
    /**
     * The date when the order was placed.
     */
    private Date orderDate;
    @Temporal(TemporalType.TIMESTAMP)
    /**
     * The date when the order was last modified
     */
    private Date lastModified;
    /**
     * Username of the last employee user who made any changes to the order, such
     * updating its status. 
     */
    private String lastActor;
    /**
     * String representation of the current status of the order 
     */
    private String currentStatus;
    /**
     * Autogenerated value used for optimistic locking
     */
    @Version
    private Integer version;

    public OrderEntity() {
        dateFormat = DateFormat.getDateTimeInstance(DateFormat.SHORT
                , DateFormat.SHORT, Locale.US);
        dateFormat.setTimeZone(TimeZone.getTimeZone("America/New_York"));
    }
    //bidirectional
    /**
     * Registered user who placed this order; if placed by an unregistered user,
     * this field is null. 
     */
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn
    private UserEntity customer;
    //unidirectional
    /**
     * User information for this order; this is never null whether placed by a
     * registered or unregistered user. 
     */
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn
    private UserInfoEntity ui;
    //unidirectional
    /**
     * Order lines in this order
     */
    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn
    private List<OrderLineEntity> orderLines;
    //unidirectional
    /**
     * List of statuses that this order has been in. 
     */
    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn
    @OrderColumn(name = "ordering")
    private List<OrderStatusEntity> statusHistory;

    public UserInfoEntity getUi() {
        return ui;
    }

    public void setUi(UserInfoEntity ui) {
        this.ui = ui;
    }

    public UserEntity getCustomer() {
        return customer;
    }

    public Long getId() {
        return id;
    }

    public List<OrderLineEntity> getOrderLines() {
        return orderLines;
    }

    public List<OrderStatusEntity> getStatusHistory() {
        return statusHistory;
    }

    public BigDecimal getTotalCost() {
        return totalCost;
    }

    public void setCustomer(UserEntity customer) {
        this.customer = customer;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setOrderLines(List<OrderLineEntity> orderLines) {
        this.orderLines = orderLines;
    }

    public void setStatusHistory(List<OrderStatusEntity> statusHistory) {
        this.statusHistory = statusHistory;
    }

    public void setTotalCost(BigDecimal totalCost) {
        this.totalCost = totalCost;
    }

    public Date getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(Date orderDate) {
        this.orderDate = orderDate;
    }

    public String getLastActor() {
        return lastActor;
    }

    public Date getLastModified() {
        return lastModified;
    }

    public String getCurrentStatus() {
        return currentStatus;
    }

    public void setCurrentStatus(String currentStatus) {
        this.currentStatus = currentStatus;
    }

    public void setLastActor(String lastActor) {
        this.lastActor = lastActor;
    }

    public void setLastModified(Date lastModified) {
        this.lastModified = lastModified;
    }

    public String getNextActorTypeRequired() {
        return OrderAction.nextAction(this).getActorType();
    }

    public String getNextActionRequired() {
        return OrderAction.nextAction(this).getActionRequired();
    }

    public String getOrderDateFormatted() {
        return dateFormat.format(orderDate);
    }

    public String getLastModifiedFormatted() {
        return dateFormat.format(lastModified);
    }
}
